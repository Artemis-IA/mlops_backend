
services:
  
  postgres:
    container_name: postgres
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - shared-network
    restart: always

  minio:
    container_name: minio
    image: minio/minio:latest
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_API_URL: ${MINIO_API_URL}
    command: server /data
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
    volumes:
      - minio-data:/data
    networks:
      - shared-network
    restart: always


  minio-client:
    container_name: minio-client
    build:
      context: ./minio-client
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=${MINIO_API_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    depends_on:
      minio:
        condition: service_started
    networks:
      - shared-network
    restart: always

  mlflow:
    container_name: mlflow
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI}
      - MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - ./mlflow:/mlflow
    networks:
      - shared-network
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started
      minio-client:
        condition: service_started
    restart: always

  label-studio:
    container_name: label-studio
    build:
      context: ./label-studio
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DJANGO_SUPERUSER_USERNAME=${LABEL_STUDIO_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${LABEL_STUDIO_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${LABEL_STUDIO_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - LABEL_STUDIO_API_KEY=${LABEL_STUDIO_API_KEY}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - LABEL_STUDIO_BUCKET_NAME=${LABEL_STUDIO_BUCKET_NAME}
      - LABEL_STUDIO_BUCKET_ENDPOINT_URL=${LABEL_STUDIO_BUCKET_ENDPOINT_URL}
      - LABEL_STUDIO_BUCKET_ACCESS_KEY=${LABEL_STUDIO_BUCKET_ACCESS_KEY}
      - LABEL_STUDIO_BUCKET_SECRET_KEY=${LABEL_STUDIO_BUCKET_SECRET_KEY}
    ports:
      - "${LABEL_STUDIO_PORT}:${LABEL_STUDIO_PORT}"
    volumes:
      - label-studio-data:/label-studio/data
    networks:
      - shared-network
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started
      mlflow:
        condition: service_started
    restart: always

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    environment:
      - LABEL_STUDIO_PORT=${LABEL_STUDIO_PORT}
      - MLFLOW_PORT=${MLFLOW_PORT}
    depends_on:
      label-studio:
        condition: service_started
      mlflow:
        condition: service_started
    networks:
      - shared-network
    restart: always

volumes:
  postgres-data:
  minio-data:
  label-studio-data:
  mlflow-data:

networks:
  shared-network:
    driver: bridge
