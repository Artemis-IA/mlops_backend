
services:

  postgre:
    container_name: postgre
    build:
      context: ./postgre
      dockerfile: Dockerfile
      args:
        PG_MAJOR: ${PG_MAJOR}
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRE_USER}
      - POSTGRES_PASSWORD=${POSTGRE_PASSWORD}
      - POSTGRES_DB=${POSTGRE_DB}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
    ports:
      - "${POSTGRE_PORT}:${POSTGRE_PORT}"
    volumes:
      - postgre-data:/var/lib/postgresql/data
    networks:
      - shared-network
    restart: always

  minio:
    container_name: minio
    image: minio/minio:latest
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
    command: server /data
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    volumes:
      - minio-data:/data
    networks:
      - shared-network
    restart: always

  minio-client:
    container_name: minio-client
    build:
      context: ./minio-client
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=${MINIO_API_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
    volumes:
      - ./label-studio/cors.json:/label-studio/cors.json
    networks:
      - shared-network
    restart: always

  mlflow:
    container_name: mlflow
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI}
      - MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - ./mlflow:/mlflow
    networks:
      - shared-network
    restart: always

  label-studio:
    container_name: label-studio
    build:
      context: ./label-studio
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - LABEL_STUDIO_BUCKET_ENDPOINT_URL=${LABEL_STUDIO_BUCKET_ENDPOINT_URL}
      - LABEL_STUDIO_BUCKET_ACCESS_KEY=${LABEL_STUDIO_BUCKET_ACCESS_KEY}
      - LABEL_STUDIO_BUCKET_SECRET_KEY=${LABEL_STUDIO_BUCKET_SECRET_KEY}
      - HTTP_PROXY=${HTTP_PROXY}
      - HTTPS_PROXY=${HTTPS_PROXY}
      - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
    ports:
      - "${LABEL_STUDIO_PORT}:${LABEL_STUDIO_PORT}"
    volumes:
      - label-studio-data:/label-studio/data
    networks:
      - shared-network
    restart: always

  # nginx:
  #   container_name: nginx
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   env_file:
  #     - .env
  #   environment:
  #     - LABEL_STUDIO_PORT=${LABEL_STUDIO_PORT}
  #     - MLFLOW_PORT=${MLFLOW_PORT}
  #     - MINIO_PORT=${MINIO_PORT}
  #     - HTTP_PROXY=${HTTP_PROXY}
  #     - HTTPS_PROXY=${HTTPS_PROXY}
  #     - NO_PROXY=${NO_PROXY},minio,minio-client,postgre,label-studio,mlflow,nginx,localhost,127.0.0.1
  #   networks:
  #     - shared-network
  #   restart: always

volumes:
  postgre-data:
  minio-data:
  label-studio-data:
  mlflow-data:

networks:
  shared-network:
    driver: bridge
