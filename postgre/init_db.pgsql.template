-- Modèle Conceptuel de Données (MCD)

-- Tables de gestion des utilisateurs et consentements
CREATE TABLE organizations (
    id UUID PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_consent (
    user_id UUID,
    organization_id UUID,
    consent_type VARCHAR(50) NOT NULL, -- 'analytics', 'marketing', etc.
    consented_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    revoked_at TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (user_id, organization_id, consent_type),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (organization_id) REFERENCES organizations(id)
);

-- Amélioration de la table users avec RGPD
ALTER TABLE users ADD COLUMN:
    - last_consent_update TIMESTAMP,
    - is_gdpr_compliant BOOLEAN DEFAULT FALSE,
    - anonymization_status VARCHAR(50) DEFAULT 'active',
    - deletion_requested_at TIMESTAMP;

-- Procédure de pseudonymisation
CREATE OR REPLACE FUNCTION pseudonymize_user_data(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    UPDATE users SET 
        username = MD5(username),
        email = MD5(email),
        anonymization_status = 'pseudonymized',
        last_consent_update = CURRENT_TIMESTAMP
    WHERE id = user_uuid;
END;
$$ LANGUAGE plpgsql;

-- Procédure de suppression des données personnelles
CREATE OR REPLACE FUNCTION delete_personal_data(user_uuid UUID)
RETURNS VOID AS $$
BEGIN
    DELETE FROM user_embeddings WHERE user_id = user_uuid;
    DELETE FROM documents WHERE user_id = user_uuid;
    UPDATE users SET 
        username = 'Utilisateur supprimé',
        email = MD5(email),
        anonymization_status = 'deleted',
        is_gdpr_compliant = FALSE,
        deletion_requested_at = CURRENT_TIMESTAMP
    WHERE id = user_uuid;
END;
$$ LANGUAGE plpgsql;

-- Requêtes d'extraction optimisées
-- Exemple de requête avec jointures et filtres
CREATE OR REPLACE FUNCTION extract_user_documents(
    p_user_id UUID, 
    p_min_date TIMESTAMP DEFAULT '2000-01-01', 
    p_max_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
RETURNS TABLE (
    doc_id UUID, 
    doc_title VARCHAR(255), 
    doc_content TEXT, 
    entity_count INTEGER
) AS $$
BEGIN
    RETURN QUERY
    WITH doc_stats AS (
        SELECT 
            d.id AS doc_id,
            d.title,
            d.content,
            COUNT(e.id) AS entity_count
        FROM documents d
        LEFT JOIN entities e ON d.id = e.document_id
        WHERE 
            d.user_id = p_user_id AND 
            d.created_at BETWEEN p_min_date AND p_max_date
        GROUP BY d.id, d.title, d.content
    )
    SELECT 
        doc_id, 
        title, 
        content, 
        entity_count
    FROM doc_stats
    ORDER BY entity_count DESC;
END;
$$ LANGUAGE plpgsql;

-- Index pour optimisation
CREATE INDEX IF NOT EXISTS idx_documents_user_date ON documents (user_id, created_at);
CREATE INDEX IF NOT EXISTS idx_entities_document ON entities (document_id);
CREATE INDEX IF NOT EXISTS idx_user_consent_user ON user_consent (user_id);

-- Registre des traitements
CREATE TABLE data_processing_registry (
    id UUID PRIMARY KEY,
    process_name VARCHAR(255) NOT NULL,
    description TEXT,
    legal_basis VARCHAR(100),
    personal_data_types TEXT[],
    retention_period INTERVAL,
    last_review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    next_review_date TIMESTAMP
);