-- Switch to a safe database
\c postgres

-- Terminate connections to target databases
DO $$
BEGIN
    PERFORM pg_terminate_backend(pid)
    FROM pg_stat_activity
    WHERE datname IN ('${POSTGRES_DB}', '${MLFLOW_DB}', '${LABEL_STUDIO_DB}')
    AND pid <> pg_backend_pid();
END $$;

-- Drop databases
DROP DATABASE IF EXISTS ${POSTGRES_DB};
DROP DATABASE IF EXISTS ${MLFLOW_DB};
DROP DATABASE IF EXISTS ${LABEL_STUDIO_DB};

-- Create roles and databases
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${POSTGRES_USER}') THEN
        EXECUTE 'CREATE ROLE ${POSTGRES_USER} WITH LOGIN PASSWORD ''${POSTGRES_PASSWORD}''';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${MLFLOW_USER}') THEN
        EXECUTE 'CREATE ROLE ${MLFLOW_USER} WITH LOGIN PASSWORD ''${MLFLOW_PASSWORD}''';
    END IF;

    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${LABEL_STUDIO_USER}') THEN
        EXECUTE 'CREATE ROLE ${LABEL_STUDIO_USER} WITH LOGIN PASSWORD ''${LABEL_STUDIO_PASSWORD}''';
    END IF;
END $$;

-- Create databases
CREATE DATABASE ${POSTGRES_DB} OWNER ${POSTGRES_USER};
CREATE DATABASE ${MLFLOW_DB} OWNER ${MLFLOW_USER};
CREATE DATABASE ${LABEL_STUDIO_DB} OWNER ${LABEL_STUDIO_USER};

-- Connect to ${POSTGRES_DB} and set up schema
\c ${POSTGRES_DB}

-- Activate extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";

-- Create tables
CREATE TABLE IF NOT EXISTS documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title TEXT,
    content TEXT,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS document_embeddings (
    document_id UUID PRIMARY KEY REFERENCES documents(id) ON DELETE CASCADE,
    embedding vector(768),
    metadata JSONB,
    content TEXT
);

CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS user_embeddings (
    user_id UUID PRIMARY KEY,
    embedding vector(768)
);

-- Insert initial data
INSERT INTO users (username, password_hash, email)
VALUES ('admin', 'pbkdf2_sha256$600000$examplehash$examplehashedpassword', '${LABEL_STUDIO_EMAIL}')
ON CONFLICT (email) DO NOTHING;

INSERT INTO documents (id, title, content, metadata)
VALUES (
    '4ce0abcb-1ec2-48a7-b237-8aea1f367911',
    'Sample Document',
    'This is a sample document content for testing embeddings.',
    '{"author": "Test Author", "category": "Sample"}'
)
ON CONFLICT (id) DO NOTHING;

INSERT INTO document_embeddings (document_id, embedding, metadata, content)
VALUES (
    '4ce0abcb-1ec2-48a7-b237-8aea1f367911',
    array_fill(0.1::float, ARRAY[768])::vector,
    '{"author": "Test Author", "category": "Sample"}',
    'This is a sample document content for testing embeddings.'
)
ON CONFLICT (document_id) DO NOTHING;

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_user_embeddings_user_id ON user_embeddings (user_id);
CREATE INDEX IF NOT EXISTS idx_document_embeddings_document_id ON document_embeddings (document_id);
