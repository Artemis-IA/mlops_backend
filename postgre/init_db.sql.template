-- Connexion à la base par défaut (postgres)
\c postgres

-- Supprimer la base de données si elle existe
DO $$
BEGIN
    IF EXISTS (SELECT FROM pg_database WHERE datname = 'project_database') THEN
        PERFORM pg_terminate_backend(pg_stat_activity.pid)
        FROM pg_stat_activity
        WHERE pg_stat_activity.datname = 'project_database'
          AND pg_stat_activity.pid <> pg_backend_pid();

        EXECUTE 'DROP DATABASE project_database';
    END IF;
END $$;

-- Créer une nouvelle base de données
CREATE DATABASE project_database;

-- Se connecter à la nouvelle base de données
\c project_database

-- Activer les extensions nécessaires
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";

-- Créer les utilisateurs nécessaires
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'project_user') THEN
        CREATE USER project_user WITH PASSWORD 'secure_password';
    END IF;
END $$;

-- Accorder les droits à l'utilisateur
GRANT ALL PRIVILEGES ON DATABASE project_database TO project_user;

-- Créer les tables et relations
CREATE TABLE IF NOT EXISTS users (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS documents (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT unique_document_user UNIQUE (title, user_id)
);

CREATE TABLE IF NOT EXISTS entities (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    document_id UUID NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
    type VARCHAR(100) NOT NULL,
    value VARCHAR(255) NOT NULL,
    start_pos INTEGER NOT NULL,
    end_pos INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS document_embeddings (
    document_id UUID PRIMARY KEY REFERENCES documents(id) ON DELETE CASCADE,
    embedding vector(768)
);

-- Ajouter des index pour optimiser les performances
CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents (user_id);
CREATE INDEX IF NOT EXISTS idx_entities_document_id ON entities (document_id);

-- Supprimer les données existantes pour éviter les doublons
DELETE FROM document_embeddings;
DELETE FROM entities;
DELETE FROM documents;
DELETE FROM users;

-- Vérification préalable pour `htx_user`
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM htx_user WHERE email = 'admin@example.com') THEN
        DELETE FROM htx_user WHERE email = 'admin@example.com';
    END IF;
END $$;

-- Ajouter des données initiales
-- Utilisateur admin
INSERT INTO users (id, username, password_hash, email)
VALUES 
    (uuid_generate_v4(), 'admin', 'pbkdf2_sha256$600000$examplehash$examplehashedpassword', 'admin@example.com')
ON CONFLICT (email) DO NOTHING;

-- Document test
INSERT INTO documents (id, title, content, user_id)
VALUES 
    (uuid_generate_v4(), 'Document Test', 'Ceci est un document de test.', 
    (SELECT id FROM users WHERE username = 'admin'))
ON CONFLICT DO NOTHING;

-- Entité test
INSERT INTO entities (id, document_id, type, value, start_pos, end_pos)
VALUES 
    (uuid_generate_v4(), 
    (SELECT id FROM documents WHERE title = 'Document Test' LIMIT 1), 
    'example_type', 'example_value', 0, 10)
ON CONFLICT DO NOTHING;

-- Embedding test
INSERT INTO document_embeddings (document_id, embedding)
VALUES 
    ((SELECT id FROM documents WHERE title = 'Document Test' LIMIT 1), 
    array_fill(0.1::float, ARRAY[768])::vector)
ON CONFLICT DO NOTHING;

-- Vérification des données
SELECT * FROM users;
SELECT * FROM documents;
SELECT * FROM entities;
SELECT * FROM document_embeddings;
