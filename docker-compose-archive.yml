
services:

  postgre:
    container_name: postgre
    build:
      context: ./postgre
      dockerfile: Dockerfile
      args:
        PG_MAJOR: ${PG_MAJOR}
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgre-data:/var/lib/postgresql/data
      - ./postgre/init_db.sql.template:/docker-entrypoint-initdb.d/init_db.sql.template:ro

    networks:
      - shared-network
    restart: always

  minio:
    container_name: minio
    image: minio/minio:latest
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_CONSOLE_PORT=${MINIO_CONSOLE_PORT}
      - MINIO_SERVER_URL=http://minio:${MINIO_PORT}
    command: server --address :${MINIO_PORT} --console-address :${MINIO_CONSOLE_PORT} /data
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    volumes:
      - minio-data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_HOST}`)"
      - "traefik.http.routers.minio.entrypoints=https"
      # - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.middlewares=traefik-auth@file,secureHeaders@file"
    networks:
      - shared-network
    restart: always

  minio-client:
    container_name: minio-client
    build:
      context: ./minio-client
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=${MINIO_API_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_CLIENT_PORT}:${MINIO_CLIENT_PORT}"
    volumes:
      - ./label-studio/cors.json:/label-studio/cors.json
    networks:
      - shared-network
    depends_on:
      - minio
    restart: always

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"  # Port for Neo4j web interface
      - "7687:7687"  # Port for Neo4j Bolt protocol
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}

      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.neo4j.rule=Host(`${NEO4J_HOST}`)"
      - "traefik.http.routers.neo4j.entrypoints=https"
      # - "traefik.http.routers.neo4j.tls=true"
      - "traefik.http.routers.neo4j.middlewares=traefik-auth@file,secureHeaders@file"
      - "traefik.http.services.minio.loadbalancer.server.port=${MINIO_CONSOLE_PORT}"

    networks:
      - shared-network
    restart: unless-stopped 

  mlflow:
    container_name: mlflow
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI}
      - MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - ./mlflow:/mlflow
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mlflow.rule=Host(`${MLFLOW_HOST}`)"
      - "traefik.http.routers.mlflow.entrypoints=https"
      # - "traefik.http.routers.mlflow.tls=true"
      - "traefik.http.routers.mlflow.middlewares=traefik-auth@file,secureHeaders@file"
      # - "traefik.http.services.mlflow.loadbalancer.server.port=5002"
    networks:
      - shared-network
    restart: always

  label-studio:
    container_name: label-studio
    build:
      context: ./label-studio
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - LABEL_STUDIO_PORT=${LABEL_STUDIO_PORT}
      - LABEL_STUDIO_BUCKET_ENDPOINT_URL=${LABEL_STUDIO_BUCKET_ENDPOINT_URL}
      - LABEL_STUDIO_BUCKET_ACCESS_KEY=${LABEL_STUDIO_BUCKET_ACCESS_KEY}
      - LABEL_STUDIO_BUCKET_SECRET_KEY=${LABEL_STUDIO_BUCKET_SECRET_KEY}
      - LABEL_STUDIO_ROOT_URL=/labelstudio/
      - DJANGO_CSRF_TRUSTED_ORIGINS=${LABEL_STUDIO_HOST}
      - CSRF_COOKIE_SECURE=1
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${LABEL_STUDIO_PORT}:${LABEL_STUDIO_PORT}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - label-studio-data:/label-studio/data
      - ./label-studio/create_bucket.py:/label-studio/create_bucket.py
      - ./label-studio/cors.json:/label-studio/cors.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.labelstudio.rule=Host(`${LABEL_STUDIO_HOST}`)"
      - "traefik.http.routers.labelstudio.entrypoints=https"
      # - "traefik.http.routers.labelstudio.tls=true"
      - "traefik.http.routers.labelstudio.middlewares=traefik-auth@file,secureHeaders@file"
    networks:
      - shared-network
    restart: always


  # gliner:
  #   container_name: gliner
  #   image: humansignal/ml-backend:v0
  #   build:
  #     context: ./label-studio-ml-backend/gliner
  #     args:
  #       TEST_ENV: ${TEST_ENV}
  #   env_file:
  #     - .env
  #   environment:
  #     - BASIC_AUTH_USER=${GLINER_BASIC_AUTH_USER}
  #     - BASIC_AUTH_PASS=${GLINER_BASIC_AUTH_PASS}
  #     - LABEL_STUDIO_ML_BACKENDS=${LABEL_STUDIO_ML_BACKENDS}
  #     - LOG_LEVEL=DEBUG
  #     - ANY=PARAMETER
  #     - WORKERS=1
  #     - THREADS=8
  #     - MODEL_DIR=/mlflow/artifacts/models
  #     - LABEL_STUDIO_URL=http://host.docker.internal:${LABEL_STUDIO_PORT}
  #     - LABEL_STUDIO_API_KEY=${LABEL_STUDIO_API_KEY}
  #     - HF_HOME=/app/huggingface_cache
  #   ports:
  #     - "${MLBACKEND_PORT}:${MLBACKEND_PORT}"
  #   depends_on:
  #     - label-studio
  #   volumes:
  #     - "./data/server:/data"
  #     - ~/.cache/huggingface:/app/huggingface_cache

  #   networks:
  #     - shared-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - shared-network
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_HOST}`)"
      - "traefik.http.routers.prometheus.entrypoints=https"
      # - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.middlewares=traefik-auth@file,secureHeaders@file"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    ports:
      - "3001:3001"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - shared-network
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_HOST}`)"
      - "traefik.http.routers.grafana.entrypoints=https"
      # - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.middlewares=traefik-auth@file,secureHeaders@file"

volumes:
  postgre-data:
  minio-data:
  label-studio-data:
  gliner-data:
  mlflow-data:
  neo4j_data:
  neo4j_logs:
  grafana-data:

networks:
  shared-network:
    external: true